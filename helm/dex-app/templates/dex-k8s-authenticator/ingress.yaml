{{ if .Capabilities.APIVersions.Has "networking.k8s.io/v1/Ingress" }}
apiVersion: networking.k8s.io/v1
{{ else }}
apiVersion: networking.k8s.io/v1beta1
{{ end }}
kind: Ingress
metadata:
  name: {{ include "resource.dexk8sauth.name" . }}
  labels:
    {{- include "dexk8sauth.labels.common" . | nindent 4 }}
  annotations:
    {{- if .Values.ingress.tls.letsencrypt }}
    kubernetes.io/tls-acme: "true"
    {{- end }}
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - {{ .Values.oidc.staticClients.dexK8SAuthenticator.clientAddress }}
    {{- if .Values.ingress.tls.letsencrypt }}
    secretName: {{ include "resource.dexk8sauth.name" . }}-le
    {{- else }}
    secretName: {{ include "resource.dexk8sauth.name" . }}
    {{- end }}
  rules:
  - host: {{ .Values.oidc.staticClients.dexK8SAuthenticator.clientAddress }}
    http:
      paths:
{{- if eq (include "giantswarm-connector" .) "true" }}
      - path: /admin/
        pathType: Prefix
        backend:
{{- if .Capabilities.APIVersions.Has "networking.k8s.io/v1/Ingress" }}
          service:
            name: {{ include "resource.dexk8sauth.name" . }}-giantswarm
            port:
              name: http
{{- else }}
          serviceName: {{ include "resource.dexk8sauth.name" . }}-giantswarm
          servicePort: http
{{- end }}
{{- end }}
{{- if .Values.oidc.customer.enabled }}
      - path: /
        pathType: Prefix
        backend:
{{- if .Capabilities.APIVersions.Has "networking.k8s.io/v1/Ingress" }}
          service:
            name: {{ include "resource.dexk8sauth.name" . }}-customer
            port:
              name: http
{{- else }}
          serviceName: {{ include "resource.dexk8sauth.name" . }}-customer
          servicePort: http
{{- end }}
{{ end }}
